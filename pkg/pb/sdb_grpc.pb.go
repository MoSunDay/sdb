// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SDBClient is the client API for SDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDBClient interface {
	// string 类型的存储
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	MSet(ctx context.Context, in *MSetRequest, opts ...grpc.CallOption) (*MSetResponse, error)
	SetNX(ctx context.Context, in *SetNXRequest, opts ...grpc.CallOption) (*SetNXResponse, error)
	SetGet(ctx context.Context, in *SetGetRequest, opts ...grpc.CallOption) (*SetGetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	MGet(ctx context.Context, in *MGetRequest, opts ...grpc.CallOption) (*MGetResponse, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*IncrResponse, error)
	// list 类型的存储
	LPush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*LPushResponse, error)
	LPop(ctx context.Context, in *LPopRequest, opts ...grpc.CallOption) (*LPopResponse, error)
	LRange(ctx context.Context, in *LRangeRequest, opts ...grpc.CallOption) (*LRangeResponse, error)
	LExist(ctx context.Context, in *LExistRequest, opts ...grpc.CallOption) (*LExistResponse, error)
	LDel(ctx context.Context, in *LDelRequest, opts ...grpc.CallOption) (*LDelResponse, error)
	LCount(ctx context.Context, in *LCountRequest, opts ...grpc.CallOption) (*LCountResponse, error)
	// set 类型的存储
	SPush(ctx context.Context, in *SPushRequest, opts ...grpc.CallOption) (*SPushResponse, error)
	SPop(ctx context.Context, in *SPopRequest, opts ...grpc.CallOption) (*SPopResponse, error)
	SExist(ctx context.Context, in *SExistRequest, opts ...grpc.CallOption) (*SExistResponse, error)
	SDel(ctx context.Context, in *SDelRequest, opts ...grpc.CallOption) (*SDelResponse, error)
	SCount(ctx context.Context, in *SCountRequest, opts ...grpc.CallOption) (*SCountResponse, error)
	// sorted set 类型的存储
	ZPush(ctx context.Context, in *ZPushRequest, opts ...grpc.CallOption) (*ZPushResponse, error)
	ZPop(ctx context.Context, in *ZPopRequest, opts ...grpc.CallOption) (*ZPopResponse, error)
	ZRange(ctx context.Context, in *ZRangeRequest, opts ...grpc.CallOption) (*ZRangeResponse, error)
	ZExist(ctx context.Context, in *ZExistRequest, opts ...grpc.CallOption) (*ZExistResponse, error)
	ZDel(ctx context.Context, in *ZDelRequest, opts ...grpc.CallOption) (*ZDelResponse, error)
	ZCount(ctx context.Context, in *ZCountRequest, opts ...grpc.CallOption) (*ZCountResponse, error)
	// bloom filter 类型的存储
	BFCreate(ctx context.Context, in *BFCreateRequest, opts ...grpc.CallOption) (*BFCreateResponse, error)
	BFDel(ctx context.Context, in *BFDelRequest, opts ...grpc.CallOption) (*BFDelResponse, error)
	BFAdd(ctx context.Context, in *BFAddRequest, opts ...grpc.CallOption) (*BFAddResponse, error)
	BFExist(ctx context.Context, in *BFExistRequest, opts ...grpc.CallOption) (*BFExistResponse, error)
	// hyper log log 类型的存储
	HLLCreate(ctx context.Context, in *HLLCreateRequest, opts ...grpc.CallOption) (*HLLCreateResponse, error)
	HLLDel(ctx context.Context, in *HLLDelRequest, opts ...grpc.CallOption) (*HLLDelResponse, error)
	HLLAdd(ctx context.Context, in *HLLAddRequest, opts ...grpc.CallOption) (*HLLAddResponse, error)
	HLLCount(ctx context.Context, in *HLLCountRequest, opts ...grpc.CallOption) (*HLLCountResponse, error)
	// pub/sub
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SDB_SubscribeClient, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type sDBClient struct {
	cc grpc.ClientConnInterface
}

func NewSDBClient(cc grpc.ClientConnInterface) SDBClient {
	return &sDBClient{cc}
}

func (c *sDBClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) MSet(ctx context.Context, in *MSetRequest, opts ...grpc.CallOption) (*MSetResponse, error) {
	out := new(MSetResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/MSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SetNX(ctx context.Context, in *SetNXRequest, opts ...grpc.CallOption) (*SetNXResponse, error) {
	out := new(SetNXResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SetNX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SetGet(ctx context.Context, in *SetGetRequest, opts ...grpc.CallOption) (*SetGetResponse, error) {
	out := new(SetGetResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SetGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) MGet(ctx context.Context, in *MGetRequest, opts ...grpc.CallOption) (*MGetResponse, error) {
	out := new(MGetResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/MGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) Incr(ctx context.Context, in *IncrRequest, opts ...grpc.CallOption) (*IncrResponse, error) {
	out := new(IncrResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/Incr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) LPush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*LPushResponse, error) {
	out := new(LPushResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/LPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) LPop(ctx context.Context, in *LPopRequest, opts ...grpc.CallOption) (*LPopResponse, error) {
	out := new(LPopResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/LPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) LRange(ctx context.Context, in *LRangeRequest, opts ...grpc.CallOption) (*LRangeResponse, error) {
	out := new(LRangeResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/LRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) LExist(ctx context.Context, in *LExistRequest, opts ...grpc.CallOption) (*LExistResponse, error) {
	out := new(LExistResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/LExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) LDel(ctx context.Context, in *LDelRequest, opts ...grpc.CallOption) (*LDelResponse, error) {
	out := new(LDelResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/LDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) LCount(ctx context.Context, in *LCountRequest, opts ...grpc.CallOption) (*LCountResponse, error) {
	out := new(LCountResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/LCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SPush(ctx context.Context, in *SPushRequest, opts ...grpc.CallOption) (*SPushResponse, error) {
	out := new(SPushResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SPop(ctx context.Context, in *SPopRequest, opts ...grpc.CallOption) (*SPopResponse, error) {
	out := new(SPopResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SExist(ctx context.Context, in *SExistRequest, opts ...grpc.CallOption) (*SExistResponse, error) {
	out := new(SExistResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SDel(ctx context.Context, in *SDelRequest, opts ...grpc.CallOption) (*SDelResponse, error) {
	out := new(SDelResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) SCount(ctx context.Context, in *SCountRequest, opts ...grpc.CallOption) (*SCountResponse, error) {
	out := new(SCountResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/SCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) ZPush(ctx context.Context, in *ZPushRequest, opts ...grpc.CallOption) (*ZPushResponse, error) {
	out := new(ZPushResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/ZPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) ZPop(ctx context.Context, in *ZPopRequest, opts ...grpc.CallOption) (*ZPopResponse, error) {
	out := new(ZPopResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/ZPop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) ZRange(ctx context.Context, in *ZRangeRequest, opts ...grpc.CallOption) (*ZRangeResponse, error) {
	out := new(ZRangeResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/ZRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) ZExist(ctx context.Context, in *ZExistRequest, opts ...grpc.CallOption) (*ZExistResponse, error) {
	out := new(ZExistResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/ZExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) ZDel(ctx context.Context, in *ZDelRequest, opts ...grpc.CallOption) (*ZDelResponse, error) {
	out := new(ZDelResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/ZDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) ZCount(ctx context.Context, in *ZCountRequest, opts ...grpc.CallOption) (*ZCountResponse, error) {
	out := new(ZCountResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/ZCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) BFCreate(ctx context.Context, in *BFCreateRequest, opts ...grpc.CallOption) (*BFCreateResponse, error) {
	out := new(BFCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/BFCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) BFDel(ctx context.Context, in *BFDelRequest, opts ...grpc.CallOption) (*BFDelResponse, error) {
	out := new(BFDelResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/BFDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) BFAdd(ctx context.Context, in *BFAddRequest, opts ...grpc.CallOption) (*BFAddResponse, error) {
	out := new(BFAddResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/BFAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) BFExist(ctx context.Context, in *BFExistRequest, opts ...grpc.CallOption) (*BFExistResponse, error) {
	out := new(BFExistResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/BFExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) HLLCreate(ctx context.Context, in *HLLCreateRequest, opts ...grpc.CallOption) (*HLLCreateResponse, error) {
	out := new(HLLCreateResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/HLLCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) HLLDel(ctx context.Context, in *HLLDelRequest, opts ...grpc.CallOption) (*HLLDelResponse, error) {
	out := new(HLLDelResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/HLLDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) HLLAdd(ctx context.Context, in *HLLAddRequest, opts ...grpc.CallOption) (*HLLAddResponse, error) {
	out := new(HLLAddResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/HLLAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) HLLCount(ctx context.Context, in *HLLCountRequest, opts ...grpc.CallOption) (*HLLCountResponse, error) {
	out := new(HLLCountResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/HLLCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDBClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SDB_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SDB_ServiceDesc.Streams[0], "/proto.SDB/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sDBSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SDB_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type sDBSubscribeClient struct {
	grpc.ClientStream
}

func (x *sDBSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sDBClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/proto.SDB/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDBServer is the server API for SDB service.
// All implementations should embed UnimplementedSDBServer
// for forward compatibility
type SDBServer interface {
	// string 类型的存储
	Set(context.Context, *SetRequest) (*SetResponse, error)
	MSet(context.Context, *MSetRequest) (*MSetResponse, error)
	SetNX(context.Context, *SetNXRequest) (*SetNXResponse, error)
	SetGet(context.Context, *SetGetRequest) (*SetGetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	MGet(context.Context, *MGetRequest) (*MGetResponse, error)
	Del(context.Context, *DelRequest) (*DelResponse, error)
	Incr(context.Context, *IncrRequest) (*IncrResponse, error)
	// list 类型的存储
	LPush(context.Context, *LPushRequest) (*LPushResponse, error)
	LPop(context.Context, *LPopRequest) (*LPopResponse, error)
	LRange(context.Context, *LRangeRequest) (*LRangeResponse, error)
	LExist(context.Context, *LExistRequest) (*LExistResponse, error)
	LDel(context.Context, *LDelRequest) (*LDelResponse, error)
	LCount(context.Context, *LCountRequest) (*LCountResponse, error)
	// set 类型的存储
	SPush(context.Context, *SPushRequest) (*SPushResponse, error)
	SPop(context.Context, *SPopRequest) (*SPopResponse, error)
	SExist(context.Context, *SExistRequest) (*SExistResponse, error)
	SDel(context.Context, *SDelRequest) (*SDelResponse, error)
	SCount(context.Context, *SCountRequest) (*SCountResponse, error)
	// sorted set 类型的存储
	ZPush(context.Context, *ZPushRequest) (*ZPushResponse, error)
	ZPop(context.Context, *ZPopRequest) (*ZPopResponse, error)
	ZRange(context.Context, *ZRangeRequest) (*ZRangeResponse, error)
	ZExist(context.Context, *ZExistRequest) (*ZExistResponse, error)
	ZDel(context.Context, *ZDelRequest) (*ZDelResponse, error)
	ZCount(context.Context, *ZCountRequest) (*ZCountResponse, error)
	// bloom filter 类型的存储
	BFCreate(context.Context, *BFCreateRequest) (*BFCreateResponse, error)
	BFDel(context.Context, *BFDelRequest) (*BFDelResponse, error)
	BFAdd(context.Context, *BFAddRequest) (*BFAddResponse, error)
	BFExist(context.Context, *BFExistRequest) (*BFExistResponse, error)
	// hyper log log 类型的存储
	HLLCreate(context.Context, *HLLCreateRequest) (*HLLCreateResponse, error)
	HLLDel(context.Context, *HLLDelRequest) (*HLLDelResponse, error)
	HLLAdd(context.Context, *HLLAddRequest) (*HLLAddResponse, error)
	HLLCount(context.Context, *HLLCountRequest) (*HLLCountResponse, error)
	// pub/sub
	Subscribe(*SubscribeRequest, SDB_SubscribeServer) error
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

// UnimplementedSDBServer should be embedded to have forward compatible implementations.
type UnimplementedSDBServer struct {
}

func (UnimplementedSDBServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedSDBServer) MSet(context.Context, *MSetRequest) (*MSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MSet not implemented")
}
func (UnimplementedSDBServer) SetNX(context.Context, *SetNXRequest) (*SetNXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNX not implemented")
}
func (UnimplementedSDBServer) SetGet(context.Context, *SetGetRequest) (*SetGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGet not implemented")
}
func (UnimplementedSDBServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSDBServer) MGet(context.Context, *MGetRequest) (*MGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGet not implemented")
}
func (UnimplementedSDBServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedSDBServer) Incr(context.Context, *IncrRequest) (*IncrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Incr not implemented")
}
func (UnimplementedSDBServer) LPush(context.Context, *LPushRequest) (*LPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPush not implemented")
}
func (UnimplementedSDBServer) LPop(context.Context, *LPopRequest) (*LPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPop not implemented")
}
func (UnimplementedSDBServer) LRange(context.Context, *LRangeRequest) (*LRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRange not implemented")
}
func (UnimplementedSDBServer) LExist(context.Context, *LExistRequest) (*LExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LExist not implemented")
}
func (UnimplementedSDBServer) LDel(context.Context, *LDelRequest) (*LDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LDel not implemented")
}
func (UnimplementedSDBServer) LCount(context.Context, *LCountRequest) (*LCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LCount not implemented")
}
func (UnimplementedSDBServer) SPush(context.Context, *SPushRequest) (*SPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPush not implemented")
}
func (UnimplementedSDBServer) SPop(context.Context, *SPopRequest) (*SPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SPop not implemented")
}
func (UnimplementedSDBServer) SExist(context.Context, *SExistRequest) (*SExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SExist not implemented")
}
func (UnimplementedSDBServer) SDel(context.Context, *SDelRequest) (*SDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SDel not implemented")
}
func (UnimplementedSDBServer) SCount(context.Context, *SCountRequest) (*SCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SCount not implemented")
}
func (UnimplementedSDBServer) ZPush(context.Context, *ZPushRequest) (*ZPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZPush not implemented")
}
func (UnimplementedSDBServer) ZPop(context.Context, *ZPopRequest) (*ZPopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZPop not implemented")
}
func (UnimplementedSDBServer) ZRange(context.Context, *ZRangeRequest) (*ZRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZRange not implemented")
}
func (UnimplementedSDBServer) ZExist(context.Context, *ZExistRequest) (*ZExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZExist not implemented")
}
func (UnimplementedSDBServer) ZDel(context.Context, *ZDelRequest) (*ZDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZDel not implemented")
}
func (UnimplementedSDBServer) ZCount(context.Context, *ZCountRequest) (*ZCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZCount not implemented")
}
func (UnimplementedSDBServer) BFCreate(context.Context, *BFCreateRequest) (*BFCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BFCreate not implemented")
}
func (UnimplementedSDBServer) BFDel(context.Context, *BFDelRequest) (*BFDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BFDel not implemented")
}
func (UnimplementedSDBServer) BFAdd(context.Context, *BFAddRequest) (*BFAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BFAdd not implemented")
}
func (UnimplementedSDBServer) BFExist(context.Context, *BFExistRequest) (*BFExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BFExist not implemented")
}
func (UnimplementedSDBServer) HLLCreate(context.Context, *HLLCreateRequest) (*HLLCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HLLCreate not implemented")
}
func (UnimplementedSDBServer) HLLDel(context.Context, *HLLDelRequest) (*HLLDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HLLDel not implemented")
}
func (UnimplementedSDBServer) HLLAdd(context.Context, *HLLAddRequest) (*HLLAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HLLAdd not implemented")
}
func (UnimplementedSDBServer) HLLCount(context.Context, *HLLCountRequest) (*HLLCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HLLCount not implemented")
}
func (UnimplementedSDBServer) Subscribe(*SubscribeRequest, SDB_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSDBServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeSDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SDBServer will
// result in compilation errors.
type UnsafeSDBServer interface {
	mustEmbedUnimplementedSDBServer()
}

func RegisterSDBServer(s grpc.ServiceRegistrar, srv SDBServer) {
	s.RegisterService(&SDB_ServiceDesc, srv)
}

func _SDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_MSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).MSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/MSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).MSet(ctx, req.(*MSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SetNX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SetNX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SetNX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SetNX(ctx, req.(*SetNXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SetGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SetGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SetGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SetGet(ctx, req.(*SetGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_MGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).MGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/MGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).MGet(ctx, req.(*MGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_Incr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).Incr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/Incr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).Incr(ctx, req.(*IncrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_LPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).LPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/LPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).LPush(ctx, req.(*LPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_LPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).LPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/LPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).LPop(ctx, req.(*LPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_LRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).LRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/LRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).LRange(ctx, req.(*LRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_LExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).LExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/LExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).LExist(ctx, req.(*LExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_LDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).LDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/LDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).LDel(ctx, req.(*LDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_LCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).LCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/LCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).LCount(ctx, req.(*LCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SPush(ctx, req.(*SPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SPop(ctx, req.(*SPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SExist(ctx, req.(*SExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SDel(ctx, req.(*SDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_SCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).SCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/SCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).SCount(ctx, req.(*SCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_ZPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).ZPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/ZPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).ZPush(ctx, req.(*ZPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_ZPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).ZPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/ZPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).ZPop(ctx, req.(*ZPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_ZRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).ZRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/ZRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).ZRange(ctx, req.(*ZRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_ZExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).ZExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/ZExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).ZExist(ctx, req.(*ZExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_ZDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).ZDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/ZDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).ZDel(ctx, req.(*ZDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_ZCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).ZCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/ZCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).ZCount(ctx, req.(*ZCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_BFCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).BFCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/BFCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).BFCreate(ctx, req.(*BFCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_BFDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).BFDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/BFDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).BFDel(ctx, req.(*BFDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_BFAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).BFAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/BFAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).BFAdd(ctx, req.(*BFAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_BFExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BFExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).BFExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/BFExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).BFExist(ctx, req.(*BFExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_HLLCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HLLCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).HLLCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/HLLCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).HLLCreate(ctx, req.(*HLLCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_HLLDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HLLDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).HLLDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/HLLDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).HLLDel(ctx, req.(*HLLDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_HLLAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HLLAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).HLLAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/HLLAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).HLLAdd(ctx, req.(*HLLAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_HLLCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HLLCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).HLLCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/HLLCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).HLLCount(ctx, req.(*HLLCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDB_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SDBServer).Subscribe(m, &sDBSubscribeServer{stream})
}

type SDB_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type sDBSubscribeServer struct {
	grpc.ServerStream
}

func (x *sDBSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _SDB_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDBServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SDB/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDBServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SDB_ServiceDesc is the grpc.ServiceDesc for SDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SDB",
	HandlerType: (*SDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _SDB_Set_Handler,
		},
		{
			MethodName: "MSet",
			Handler:    _SDB_MSet_Handler,
		},
		{
			MethodName: "SetNX",
			Handler:    _SDB_SetNX_Handler,
		},
		{
			MethodName: "SetGet",
			Handler:    _SDB_SetGet_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SDB_Get_Handler,
		},
		{
			MethodName: "MGet",
			Handler:    _SDB_MGet_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _SDB_Del_Handler,
		},
		{
			MethodName: "Incr",
			Handler:    _SDB_Incr_Handler,
		},
		{
			MethodName: "LPush",
			Handler:    _SDB_LPush_Handler,
		},
		{
			MethodName: "LPop",
			Handler:    _SDB_LPop_Handler,
		},
		{
			MethodName: "LRange",
			Handler:    _SDB_LRange_Handler,
		},
		{
			MethodName: "LExist",
			Handler:    _SDB_LExist_Handler,
		},
		{
			MethodName: "LDel",
			Handler:    _SDB_LDel_Handler,
		},
		{
			MethodName: "LCount",
			Handler:    _SDB_LCount_Handler,
		},
		{
			MethodName: "SPush",
			Handler:    _SDB_SPush_Handler,
		},
		{
			MethodName: "SPop",
			Handler:    _SDB_SPop_Handler,
		},
		{
			MethodName: "SExist",
			Handler:    _SDB_SExist_Handler,
		},
		{
			MethodName: "SDel",
			Handler:    _SDB_SDel_Handler,
		},
		{
			MethodName: "SCount",
			Handler:    _SDB_SCount_Handler,
		},
		{
			MethodName: "ZPush",
			Handler:    _SDB_ZPush_Handler,
		},
		{
			MethodName: "ZPop",
			Handler:    _SDB_ZPop_Handler,
		},
		{
			MethodName: "ZRange",
			Handler:    _SDB_ZRange_Handler,
		},
		{
			MethodName: "ZExist",
			Handler:    _SDB_ZExist_Handler,
		},
		{
			MethodName: "ZDel",
			Handler:    _SDB_ZDel_Handler,
		},
		{
			MethodName: "ZCount",
			Handler:    _SDB_ZCount_Handler,
		},
		{
			MethodName: "BFCreate",
			Handler:    _SDB_BFCreate_Handler,
		},
		{
			MethodName: "BFDel",
			Handler:    _SDB_BFDel_Handler,
		},
		{
			MethodName: "BFAdd",
			Handler:    _SDB_BFAdd_Handler,
		},
		{
			MethodName: "BFExist",
			Handler:    _SDB_BFExist_Handler,
		},
		{
			MethodName: "HLLCreate",
			Handler:    _SDB_HLLCreate_Handler,
		},
		{
			MethodName: "HLLDel",
			Handler:    _SDB_HLLDel_Handler,
		},
		{
			MethodName: "HLLAdd",
			Handler:    _SDB_HLLAdd_Handler,
		},
		{
			MethodName: "HLLCount",
			Handler:    _SDB_HLLCount_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _SDB_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _SDB_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protobuf-spec/sdb.proto",
}
